name: ci
on: push
jobs:
  record:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record responses
        uses: cypress-io/github-action@v6
        with:
          start: npm start
        env:
          # record all API calls
          CYPRESS_magic_backend_mode: recording
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}

      - name: Show changes JSON files
        run: git status

  magic-backend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress against static backend
        uses: cypress-io/github-action@v6
        with:
          start: npm run start:static
        env:
          # assume that all backend calls to "/todos" are pre-recorded
          # in the cypress/magic-backend folder
          # and on CI the API backend should be in playback mode
          # and completely stubbed
          CYPRESS_magic_backend_mode: playback
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}

  playback-only:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress against static backend with strict playback mode
        uses: cypress-io/github-action@v6
        with:
          start: npm run start:static
        env:
          # assume that all backend calls to "/todos" are pre-recorded
          # in the cypress/magic-backend folder
          # and on CI the API backend should be in playback mode
          # and if a test has no recording, but tries to call API
          # the test should fail
          CYPRESS_magic_backend_mode: playback-only
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}

  inspect-backend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inspecting against real backend
        uses: cypress-io/github-action@v6
        with:
          start: npm start
        env:
          # assume the real backend is available
          # allows each call to go to the real backend
          # but compares the request and response to the
          # recorded api calls from JSON files
          CYPRESS_magic_backend_mode: inspect
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}

  # these jobs use a different Cypress config file
  # were API interception for magic-backend is defined
  # using an array of interceptors
  array-record:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record responses using array definition
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          config-file: cypress-array.config.js
        env:
          # record all API calls
          CYPRESS_magic_backend_mode: recording

      - name: Show changes JSON files
        run: git status

  array-magic-backend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress against static backend
        uses: cypress-io/github-action@v6
        with:
          start: npm run start:static
          config-file: cypress-array.config.js
        env:
          CYPRESS_magic_backend_mode: playback

  array-playback-only:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress against static backend with strict playback mode
        uses: cypress-io/github-action@v6
        with:
          start: npm run start:static
          config-file: cypress-array.config.js
        env:
          CYPRESS_magic_backend_mode: playback-only

  array-inspect-backend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inspecting against real backend
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          config-file: cypress-array.config.js
        env:
          CYPRESS_magic_backend_mode: inspect

  record-remote:
    runs-on: ubuntu-24.04
    name: Testing the remote API
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record responses
        uses: cypress-io/github-action@v6
        with:
          start: npm start
        env:
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}
          CYPRESS_magicBackendAdd: '{ "mode":"recording", "store":"remote" }'
          DEBUG: cypress-magic-backend

      # once we recorded to the remote API we can test the replay
      - name: Replay
        uses: cypress-io/github-action@v6
        with:
          # we have already installed everything
          # and the web server should be running
          install: false
        env:
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}
          CYPRESS_magicBackendAdd: '{ "mode":"playback", "store":"remote" }'
          DEBUG: cypress-magic-backend

      - name: Inspect
        uses: cypress-io/github-action@v6
        with:
          # we have already installed everything
          # and the web server should be running
          install: false
        env:
          MAGIC_BACKEND_API_KEY: ${{ secrets.MAGIC_BACKEND_API_KEY }}
          CYPRESS_magicBackendAdd: '{ "mode":"inspect", "store":"remote" }'
          DEBUG: cypress-magic-backend

  release:
    needs:
      [
        record,
        magic-backend,
        playback-only,
        inspect-backend,
        array-magic-backend,
        array-playback-only,
        array-inspect-backend,
        record-remote,
      ]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v4

      - name: Install everything ðŸ“¦
        # https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v6
        with:
          runTests: false

      - name: Cleanup package.json file
        run: node ./scripts/prepublish.js

      - name: Semantic Release ðŸš€
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
